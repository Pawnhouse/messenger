// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  firstName       String?
  middleName      String?
  surname         String?
  birthday        DateTime? @db.Date
  email           String?   @unique
  emailVerified   DateTime?
  oneTimePassword String?   @db.Char(6)
  isVerifiedEmail Boolean   @default(false)
  username        String?
  image           String?
  hashedPassword  String?
  publicKey       String?
  subscription    DateTime? @db.Date
  theme           String    @default("usual")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  conversationIds Int[]
  conversations   Conversation[]

  inContacts       Contact[]         @relation("In_contact")
  contacts         Contact[]         @relation("Contact")
  conversationKeys ConversationKey[]
  accounts         Account[]
  messages         Message[]
  sessions         Session[]
  Payment          Payment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?
  publicKey     String?

  messagesIds Int[]
  messages    Message[]

  keysIds String[]
  keys    ConversationKey[]

  userIds String[]
  users   User[]
}

model Message {
  id        Int      @id @default(autoincrement())
  body      String?
  image     String?
  createdAt DateTime @default(now())
  iv        String?

  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Contact {
  id            String @id @default(cuid())
  contactId     String
  inContactId   String
  userInContact User   @relation("In_contact", fields: [inContactId], references: [id])
  userContact   User   @relation("Contact", fields: [contactId], references: [id])
}

model ConversationKey {
  id    String @id @default(cuid())
  value String
  iv    String

  receiverId String
  receiver   User   @relation(fields: [receiverId], references: [id])

  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Payment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  token     String
  status    String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}
